%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 730 730
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 730 730
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: GBKDZV+NewJuneBook
%!FontType1-1.0: GBKDZV+NewJuneBook 001.001%%CreationDate: 9/7/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (NewJuneBook) readonly def/FamilyName (NewJuneBook) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /GBKDZV+NewJuneBook def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /r putdup 34 /e putdup 35 /a putdup 36 /c putdup 37 /t putdup 38 /space putdup 39 /s putdup 40 /p putdup 41 /o putdup 42 /n putdup 43 /i putdup 44 /v putdup 45 /h putreadonly def/FontBBox {-51 -196 1282 952} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF7EB58E2219848B692CBA620C4180E2925530AFA46D4036464709CC2B144C7A21A075EEF21F8B7CF98BFA6719668ABD59E686C4089F0E17AF63A5C413A3CEBDC2659D1D9B29A36FD9C316C21C5B09BA8B25D37683ACA3BD94322D4041F72E7717C1D58EF49B05CB5C31F5E52376C567204B89A1901F346C2AE8EC242BF37712FF0E9971D49F45320A84BD4432C089C689184C2BA852916D88132E5E05F9F556060499FC8AC537926A2884DF1CF6F1730919626D450BABF55D7C13CDA5A7BD100C9F4E59E74A8137CAA0E797E98CCA1D83BD7523D6524F10E23EDB107166ADFE982E3718A9EC1382AF81F69D8068E553787FC84724684801173B98178FA43F44623F223204C826E90CD867A3334B02556EB915A2E5A7C6DADD009D134F7690C946DE3F59E2A15F3ABB78F137C3489D965C24869C3CCE6C91C4A3CAB8FC91DCB03F892B44EB1E7CE0E256A08EBD1D62DC4F0EDE05EAB8C18CBD2AAB7C9A16DA9710D3756CDFF037E98179434007235F91EDBDC7017191AC862C6944A71B4BFF642EEEF8C4831C78763100DCB207CA064EEA75E00FA2E93B83AC542FE1E4ED60DE27CFE2495490D8034E1EDB54CAF83E2A0523B2D88038A3E582E1B19603DC49D5FF8A7FF8A5E0D1E31EFFABC9C42AA33FC7F5BF9C429DF89D34C14C7ACC753011FB7AED53B0C9EEA1BFD4C238E422642CB2DD49BAC411504371692F54275F8174612F063799966D48F215DCB5538F1CF92C3399677E9EB319CF45482A4C978C4C18186BED654D0C7CB5B98724B822CD08EA494863729B58C91737261E57F6799995DDDC83DF4B4FF3D3C7C88BAAB72C7AF63326070B506DF48C937CB5C849F85D9CB3DF2625684DAC3D05BF960EB7F15F4FC30824A625DDF85845EDA6CC861B3EEC3E1646B6281F473DDA4BBC623346B500925241B1E56B22B123E0C0F64A426544D7D12E4175016FFD2E1BA57FC29DB1AA755E6986C30B471DE6E9BF6B623D4EE655EB6A6464A632207AF263D0C055900D321DCFDD6E73151642EB3B858C63EA3DBA6A4082AA184D324D7E17ECBA8AB0C21609F5835AE10B973554614AB0A09E590E961C92317AB703EF0E233979FC68D1C19DE4CE6F9E27E97682D9EC806A130AA6FF44292B23C6FC7E37AD4279C8A4F60100EB892940C432953C352A4FE07B8BC39C0D4EFAAEED52703B3C12D416860B10D2DC0BBE60D65B0E9AD9011A17BE05E3C9DEC0563B5904D941CB7F05B641801BFE03281E5B29FC37DBC45FF3C6A8DD6B425E9BA39F153AA34DEB604205FCB4ECED4152F67E8D858BC2FA2A2BFB1739F70474220761FA13A9347F0239B1DE34FDA51C18031D72329BF4FF91C610A923F23E34BF382026FAF1D0B9DCCB4C16D8F53F2CC0C33B33F8A9C0765EF3CBF68D25B4521022FB90122A6BF7DEE08BD35C79667E652664B09F64256A81D3E27B71FF35D810FFDA2EAF7677AA9FB70974430423B513A247A7E12211490A784F67C1758612DCB8CFBFAF587B62CDC30E2A043F8D30115B87D2239FD5427AACA7B5BA7FB21409F839EE572EC1AE8477359F73B95D8C32B0EC3CDB3EA76BC2BB37EDE726B2FFD92068706D147F808BCE87158CB6073C1CCA588A7BADE40E9355521F7B2939E0396DFCA77BBC81771C94006C08C7F1A67A559C11A4784CB577B79B21B2E47B8B516475F17145498435CF3BE143EE0C9A13444D284AD3FAB00203883F33B05858FAD80C20873515AE7C30FDE1BDA095409368336A2F8B17FD92472347F18B36C1668ACEFB76DD80EC98B90B45ECD5781EF8CD4819AB6B5DD6F29BF0EC2855E9C0DEA17A2F0C757C962391BCF2BAA9D24264A747226CD8A8722BC1D767FB397BEDFBE5C9BDD4519D9BEF87BBF6A19911BBD3739E8DAEB610758DD31B80DD400272F1EC3B250685FC286012EEE1772292C05C233953289B51D56BA9852503D2B8F26AC92F119AA348E1D30517A3ED5DB4AF3EC415AB2003D92D61D663626FC2D66953488A87CBFE55D469F460543244B329ACDB602F6C3D06B3BAD1B52CC61EA516A6E48DF56FFC6E8E705AE7938DF4236CF8FC06184970F8A4841B92A3DAA5E14EBC0122112204276FAD5F9F4E80C5ECF9374343485B03AB0FA980A838B617177FEE5B0FC27C6F9576D5097CD8494EE2F9544AC5389D9548E3388C27D983106568B41BB7F67335ED5BDAC798B0AF2059DFAF3851FA97086F14A7FB2C8E148535AB6BC6BBA5B61ED3543A629141F9D15E25D2E14B50AED64CF5CAE112D5550E4E55E0F10F60FA73EAB6D2FBD3D02F29CC95869E8BC00C26E5D6C4A4C8C42FA047E094D9F9B1D18033B9F57A4440D713496F2DB7277E1855A25BC1BB3F6065D0B00B3DD50856539FCCCE62AD9DE87ECC0B7BA95D9D63E046D7B8A8F56D16EF9EEDA0D2C8BF812CAD24CC94FDADB878522B054D0A7C618C87B14D365DC9D14CACC86FCAEC390F3B1041B3835B46749D6A0471D0C9D9A4D7EC361FD4BAD201ED9310C2B2D593CF9805700A5206B7186D9E36363C1A5390A1C9CCA45DCC6D796A1914665B3E389D1A205A67EE977ABFBC80724E926A4C738181F34D9667A27EB20C39FDF0877753C501C3EA0996F5E9C320C7E1D11F99BB530900F7AF234B376893961D0F9F44B4BC24BE7B043FDD5922C8435065156DD72B77FAD29E2E3216FB9265AAECFB38136D71712EC5155D779CA664A293FEFBB2CAA4702A72E04F93308B7BF41B93267BB4746BA7888E3FE27FD325A902594B710E8178B056274E93ABE32865826B5B2E68F93A61DA600ACF1C8B820D6312B052DAE6BA6A9B4B1A60231CF555E463F27F2BE9C371B1114267576022249B7B8A6725F3B5164ADB17952FE5FE842E8802739C52CFF5FF7958575F21079703638ACAA246D5D202FF8C13BB34583C36F022B6427B29387FDEE0EFC2370D0CAE6397ABCE9D0B557124CF1F700F6E1C75B42FC38D5E36EABDA56E401B3083D33C32EA3D307F015DC95D454AFD953D0378B28D2B236F7CE86A12FA553BBD39D17B063753FB496819DF61F735A4A9EF9FBD92B2102225AD45393228CBBBB27E12B76FA347FAA2E24AAC9675DD1EFA391D96EE8543E556483BC9C8BE780085EB2F6AA4FCD614DE06A46CE21A88CB07BE4013E48358BC1B89A07C2FA74009482B8575BBDCF743D6506B36F1501C836CBB88C467FFEE4CE4AF2E0FC524105FE64825AE71B89EDF5D0B14DA04A23556025FDF1B7384376C553F36767CAB4E8A659647CC625604735A9DE0FB134E04840424F58C18AC65FB68D8E3CEBCE84D344EC2B09A7FF01DE6815DE1A89B2331E1F34420859156C4B0F8ADFB099E602A2878D6B4BDF1753D37424AAC7BDCDCDDBBFC6A28E53E894DD87C1EEFA4B0800F1176DA6EAF552C6A4F7EE89E6A462AC070F4BC72AAA43749C14FE13BF89E092E605C82784FF1759603953B69EC4CFF76F8C6E8AECA0FA763184E589888A1E3B280A020C34B0182F0C69C38839C60E713D23787FC8AAE6558B74A9DDF84C714EF4AA93B4F1FC05887353455203489CC03E4A5B40FA598B41BB7F6725A9DBBAB7286D5BB47AEA37B9E9566B75E229525BD5BD0B20DFAE8D81838AAAB69AB45708719973F2DED867C5A7F86C74717207FF308FF3C57ECF293C1D852CF762F45095CD52522B9DD24326E48B21ECE282CAFA5536DCB70F30B912C9FAD2AD93C4330F9B678FEFA6D67B02B0DC9E465B4B7F64E6C8A165B902421EE6162BB7F8859471060010F7AAAA029EFD68CE59AFEC525DA8E4970CB81DC5485C4DCCEF156D033E1A206A63E9298C1A0882D0BC96F8316F66F1875E013539DB02144C5054E643CCA4DC96784946AA2BC42F3897633879E75B21CFE51B2489933292B860D59B83CFB498E476F772849C714D639AE6C65463C1327126EF9FFBA546D5C8E2BD97C2FB10A28BBD1F9A0238367F7FB51CE1D37241924FE3FC56F16D1998BF4E55923F1DC689DC61B233A8804A3A04C2082BD44EB1A22843420927162621781C4506104C01A14AE8C95393A67E11AAEA39AE1D9F183F35AAD0F0C13FBCC5F902167E41CCD7652E2AA5F0FA9B471237856F75ED5F3E4DD257EB2291A838619D33F3C1F5BF3F7E58F3DC5FD2D87BF998B7FD3B8601A1A0E599C26948E748A2AA4901B1D16AD661DDEDBA14A718344EEF69CC1B22DA03C18D020608986A0EAFFDAD88188C63F87144FB4C5B50EFDECF5E9E7A63D43B7D558F3329445C631DAC8CB6FBA672BF4721EA956EAA3889C3D94D6D82530CAE532BDA0BF9D694B8A082EC7FAB11CDB6CC50740E6E1F546C231200D55A6E81DFC414E68D52063F0DD0D0F807BB560D96BF67BED910BB61EA25A97EBA8B35805FD24D52E8A96BB92DF1BAE3635ECD913473B481EB12751537D4DEA092D736B829746CA80F5D53D2354EC01B63B23D3B01BB1F5964ABD560BDF4D2EE83F0302F378BBB64E31DAB32E31CE0DC9FEC5BF28B90B61327BF5A030D556DC14ACF7C205061CB912C8F06E3083B73367FDF81F9E7C20D870B1B9683E41F0A47CE1A0C016627EF3DB0F2B6FC2A92537C0CF199E117336F2CEB41E0E820F97BAC2CB2314E9C34A11883827F00BC8AB0E73B912FF53141EB2A3B40FC9C3D71A028ED8358EC96E7D0F2464A99646360E9165A0788A77C0C126FAC5E2EE05435BA12AD6D9F5C5979A0CE83D1A7F6443FAE7AF5171021B068E50F2FE339CD0872E58CD08CD9BB7B1A80B0512CA4E13C94CBEDA213F6A1B9DF9A71E52B00E1CA2DBC52DDEA582C5E75FC595C3ACD0B8DCA82C09C858FD0CE194C8D9D266831F199A5C099636381D1E76EE7ABCDFE0D25D88290803393B6DB58AC0AF5E267D15AEF9CCBB87EB8743176C8C11FE2DFAA4E092F9CA11A8D3EE894DA1363AD47A04B2CCAB78D07469C23FFACD7C61E978AA14F807C17A8A5964B23A97E7622FDF0C1A94C5A4539E7D515432C4F6B1C272AE5129F1607462E902CE5B66FC6D3524AC4E82E86A2D4A2B68EECF1409AF0A905FF3083883435095A286BDF9C5A448C96A6CD1E3F4E9DF89470D02095C7EE7FAB3908B8172678925A6992EB1C4A34FFC2573FDD9A07A847AA7D2E17A3B4FAF98F8E6F21027F942E00A616173555F761F5F99219E95D86FC54F1FA99EACAED99C270832EDEA8A5F12AD7A405B55F4A050371F26C80268739763ADAE9DC1EC11D6E04212EE2F8914DE8DBC4D5C9ABD8318CAC5B6ED923454992207140FB2761468029E88595AFE80F5B2E5C70FC3FAEBDF6178AC8B8E3FC93E3FCB47E4CD74BB60FDA5714F8E433AAF51EBA1195E5F46CD8CF3CF737E219DC33458634D7299C76FBF5657D574E4F1DB07ABA1B55E1E4EA26F6AD2D1079C148B4DD784CAE27A43ACBEECD6A5C94043EB67AEACC5A05E915616A7B9D21E55EDC5D4572A32BE89D363B59FB19E479AC974923265829FF5BF68B4562828D9F57E5707561B779D915C1082200C9092860F89100F0823828A62FDA19821BA819BF3232BF70CDAE9599E2044FA292F82F5DB0BD6292B001E9CAB3BBC97ABB7FD9C9166CF3107C6C6C314D24F0AABFA6FC312183ADA3B4508418FFC92D8FEA3F45762EBD0D27B067186066528C8F12F23409A729226257FE075714CB5F5FD31B764B24A4EF9A9C27E45073AAF795CE9797EA96C000E99521B535AC5126BC0F4237F9D25D5ABF78BE4513CB8B89AA8D582549989CC630BD3B14401F0306F152B027FF350AC83573BCD1246DAC23B91FC364292E8328615FB13A1180788044EBBF42439A1518BC2081C8FCF771358D02479C2A6EAE7C62D9FBDA9F6D7D4841C449EF83D5B25A61451433CBE236C63D750315F9DE516357D26545B8A20BEA9D61D7424D111C858010E969168B5D57B36D6DEAD759D5E04CDDCD8DF5D3B4EBE092F72A5AB1AF61B292164E000FDCC25D2AE74EB8A331777050A8B857C4B51A77611A5EBF1022EABCD2A780A871C37F0B2B100F435FC3FC0BF4A653EEFBD6E69DBB0816A9C200CB19E20CFE699B9CD095003F81D881662F8371AD8DEFD80ADB2E3EE7A1ABA76E0C64EA043538D595EBBD7A02A07A40120E5B9D1048A4291F01FD2C1BC598FE0DC4B2E1E804A1A6BC228AFB372BA0860A2C7C4E24111FBEA6B585C1A1D498251842E177FDBB83B0F24B7AAE6A75D65DCAE68FBB06339385B8F98277755CDB050E977FCAC34B84176556B23BC6FAEF785F4FEB86C76AE7E33FD9F2A98505A495EE2DBC692561275D5308383BC1D4DB8C9118804F720505522293615F46CB317114AFA7D863BED56A15E6717DA0C3E45809AA7053FBEF6B39CC8E26F4BDC8FC66990E35D7BCBAE9B00819DA66F30F118840893099299F4B09E0815A0DA4A7A93530339E59223F19364E75477377BBFC3ABA0A7B067E92F80DA0C37D1579A9AA492EA20467305D01AFDE2080E6A55FB234291C910A0620C64F227E6B2CB1DE2A1546E30189265D5B6EF7DB33EF63BD0336818B921F656CE3F62C8E657C2C6D6C44EB215C769049A599B5CCD1C3ECCA4105CDF806294866E4BBD087C44E6AAAC17DC049E087793F13DCB22553F98262F394A292FA04BD501357A33046000942512FA2BDF23D4006948716317B1B7095795D20EE537E52650B3DA564BC04C5025C0BE6DBB72B0C02F67078590AA8D19B81F3F04100C0F1862850E6D062A9A7D40F0642E5B34261B220D166D740BCA94007ADF3A3A3A10CE7243961B5019ECFBFB2EE386FE75313CF3BAFF042885C5CEF996D102052C0B8277BA1B089AFCF81A4D10C60419B0A30C408666ACABABBBDAE4AB3D29FC3A83E15E0736EA7C18F709756957E0B46D3EF5E715F8954D25A5D34F0425E9748D5E29C5EE0470A9770DAD173AC50140F6A000A5B79738AA1D405C6959E9F1C61F32E56266B1228FAB201AACCF1BDB59956D99BF238DF850280C543263194B9104E0F84B72921F5B05367DF4D2FDAD6676191ECEF0D6F689C047AC5594A49A178B7754ECDE2D9F809BDC4BCB1D99AF8A6D94229EA7C5A91F59022323C62F72B3EBDE60AB99C7896E4A6B86AD8F8254514CDFE473A471EA3A8882C9270FFEE4AD9EAAD722D1B568066C6555FC8848AAD9BA8102DEAFA60E8BFF0C00A998BCCA92A665FA1EFAB2ED0736D48C8DB369DB9C61FE7812A3D6CAB75171407E6D24D383B4A87BDF19A6821660E09CAD56C89E7B5F4522FE77F0F2F78D3BE12F2162634D2FD8092EECE83BFCA2567A347F3863566AC61AC740593CEF8E504E4F13649B5410DAB50E2042EF20652268E899C87FF04FAAAFF9E06D152F3D3D83875AE7E0FBD9C635E321FC575E6D14EC500E33F73939145916EFDC7994ED9A6EBCD453D8B8D9C99D6598767DAC35B60229C3DE5207960BFC89AEEB12812F58719EDF3F9D85BDC5C561AED4818F8712E430540ABCA2D8486F094A874F1B841B16C3AEE2AC7EB1C92C8693C7C5947D7251965B32F55268AAB4F6CF9BB36B2A0DF4237ACFFFDD336496943077A0388BB9086C2F6D976EB3836AE07D4B7C158E5CD39D5FFBD9A5EE093DC71D6BDDE2D82D7B23DB5A910949760B287AD555AA757A21501CDF3CA2CB599EF5D7BD6E9556D50CD09CEE5E32A9237264060A91ECD12538667E318CFB065A6DA5DA7C0DA941F6E9AF17B08A3AA5E12DDBD61B35E4C301E64BC37D69888813F6E2EEE5F45C8FE6CB92A88B4403CE492151409F579762452598DED6E19C911DCDE5F144834602682C3FB79996FC4B98AF679B72862B3F73070522475385B8BB4F47C5672E88C3B42A4691CF2279BBCE8103D33172D5FAA73B6AE622C3120E08552C7CF3A7AF8F0FA5038BFE2594BD211C8B5349BF20D0A0605E95A295528EB7D777551E67276A311A414DD64CC22CFB376F7EF7DBA657C5C68F46D0E05B446CD440EC5BDF3B08B0350EF9150095902BE86FAB21824068EF194557707267CB6E58FED4EF3949C5E6EC14BBAD8D78B054B7E3BC175C3A3BB199137C3DCBAF05FE172D9B743ACC868A552AA47F3854DA2B27F74C706C6948DF558A8B36066FDC2DE6982EEAC8DDADB154717E8D26A1C2AC8101DA74B4A031A3712A059F795F8C193324911301008C82A705773B1DC75B42AA6B136559500CB260E740884FFD914122DA8A891A3E473AE00B432D886A12EF6B3F071EEC7F7A6EF48F0B20F18F5C2AACC83777F9CB34F7CB2F3CAD9235F4C6B6707B279C4CA06EE8B8D7FA772018E59B5D8A9B73DA2869FE577796C229D6FCCC417F85601D9890F38729DD3A6E11204CA868022B943DA83238FDC18EFAB3441F27F43A0D28352C9E7508A94F353155E5816DE3EAEAF3B370A5E2E97C62B757DE5B75E5AE5F52578DB92E2DFA06B6DEB3F3A74FC5531C0F37FD0742B38346620E6FC62BC881F7C4D86FEE6AC82F4C458AC18F5F82741FC6954E52D65A79138E3A34641F3E9E39BC1AAD10817E92F19C2C67F6C2037E4D51DD2694C68814782EBE1F384E17F6E15D52DFD4AE2A36DE96D875FAF6AE0907E111697D1B227BC999C0D2432DF25C956737AA36621E383787F96CD9474853CC980FD56627EC4C4EB241B84B61C10F1423303E3CD725F823EB6C9506B7F1F8076B19A9D505629D9A151152979A546059AC67B8082407B2F6927B345AF91621E40ED58B6FB4AADC32834B89DEDF0FB6DA57B6CFDCA2D0F427158C2AAE1FF2CD12EC750434D4ADF8253D3EBA5D75E4F92EF5B08FF62698C53F70B8F79D5ACD3A1A84EE32AFD48FD700FDB7D1C1873E910C956B578C164E014B4551A3BB13B1F75BC8E327F5FD210C2052FCEECA175260290D8B07B987C5C26ADD5E47145E10F05B4793311849639502322A947F3CDF16D2E4A95A59C7D0301944174D99A59C21AB5F2A7C73AD0ABF1A407DC9CB74DBDEC1FDB889DECD34AFCE0D6459C781C2336A4744E8F1FFF4F1FEB1F4A5D73D7458DD16CA8B1C71295CB574D8238EB4E364D85A24B58E123BCAE4BA41D1D6A6302427AC0B150DC4C7F5992D8DF7BABB628DAF1C64FE304B589D7ABEA4D4D8950AD21FD5CB37A8337E15F2B635802D36527BB7C37D8F7474CFE51D987DB85C474FBF08D72CEF7F0807E6FD78F92923B7690E6F4855692C7CBFB9E858969D5A0CB7704F8860693B375B0133F301AD91E084D9B691E483252E8093BEDF951855157C30888125BA34012E907F57A5B10ECF4F9784AD16BE30E5E5C73756F879706AF1624AD6FB288D775ED43C395143593337A3849FF0E513FCF9B846C4F88784B0346164F3D6B577DBCCC75E2026599B6F9E02EA8BD357CE0A1C027F963E22CFBC4776526DF70BA3804EBC82C6EF2D2D1E090052B0F4022C5E9DFA19E5EEAF819CE551BEDFF3E06F69081575AA1F83BAF74789FA2A896EC70C3266A2FD0293DEEBA817B57A39A8089F13350892BCBB2DC031557AC541E6C50722005BFD184F915ABE80ABB9C47FDD2B46A2C3A737B4F537F48A3FEF1CCFB10AB94691371730D209DD2FB2B4B879EBA2A11A006AA0626E402900BC15564A4A6B1BA7B6FB832F9D51BF898E270247A9E994DF357A7792B5A1759F5EACF766DAA7F01F8DC512664EE51B909E5B75FB02C0982CE63701C3C4909B75DD348EC4CA3D551CF8ECA1740504AE16076CBD282288BF3F69EC9709F1406929C1993F55831274C3E9D471E76AFD28960E04C7338E302ED72A49657DBA3216706A0D30AF81D2467C8076221C177631390036DC6C2C5F08FA81B18BE93B5602DB9D273238FAF2876421DF5B82E63BEF00D9540409CFC1893C0FA5EEF40DAE5955477DCBD484DDA6371DFFA62A2C7F6AA3F85C309F349A7273A4D5278FA86AACD1ECA6D4DB700BF8C9ACCBEC14DEEE971BF2897203ECCE4190DE6D967B174C0B0E1081104B6FCC9C06F8F277DE102E844592136B5124F4A6ACE8A65AE63A5E6F4BF2FB20042EA7FD8C960D6B029EC9BD84CF02B0254D44C7AC034EC2E6CD509C604C190FFB5D39EC587C795E298B220383993E77A15713EE6BFB8C8A48212674B02FCB9D658ECF4D9B623DF74E19084EC06C1624923AE6DB899CDE274DF06980438F8F9D3E1E386E2874828AB0AD3769B855EA3744F2851DE33DD1D5DA8ED5E63E8D936EED2B5F805E177FEF71AED3F5A2610D566CE7B9CC393380E92AF8D6573282A01B8653EF0C61D5EFE347FCCAE6BC95DC1BA212E384A9A8E8DB079DCFCED9570F29E28E8BCC62BC2B319C05DDF2755AD08C37D9A8507869815615196AAB7477590CDF2EB2D61B04E2884AD3A455C78399900105D7524DE0CE16B0DC8144CF6CBB38AD270D2FAEBA0975A38EB6221C5EECA9C00D6EBE8B2C2B674C7D839E92CB378C69A30D20F61C9110643A068EC00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/GBKDZV+NewJuneBook cguidfix
/F1.1/GBKDZV+NewJuneBook renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
20 w
2 J
0.60000002 i
/Cs1 SC
0.049173262 0.00066691171 0.43868476 sc
q
0 0 730 730 rc
-0.86602539 0.5 0.5 0.86602539 418.47913 335.47278 cm
0 0 m
275 0 l
S
-0.86602539 0.5 0.5 0.86602539 392.05609 529.70673 cm
0 0 m
275 0 l
S
-0.86602539 0.5 0.5 0.86602539 405.01761 432.15674 cm
0 0 m
275 0 l
S
-0.86602539 0.5 0.5 0.86602539 449.10092 248.51125 cm
10 0 m
10 275 l
S
-0.86602539 0.5 0.5 0.86602539 440.44064 253.51125 cm
0 0 m
275 0 l
S
-0.86602539 0.5 0.5 0.86602539 577.94067 491.66824 cm
0 0 m
275 0 l
S
/Cs2 SC
0.046527751 0 0.44748074 sc
1 0 0 -1 83 250 cm
/F1.1[ 72 0 0 -72 0 0]sf
1.484 86 m
(!"#$%&!"'\(\)*'+,")[ 25.128000 41.760000 42.408000 37.080000 28.728000 18.360000 25.128000 41.760000 38.736000 42.552000 43.488000 41.400000 38.736000 16.776000 38.232000 0.000000 ] xS
/F1.1[ 105.4 0 0 -105.4 0 0]sf
0.39689592 183 m
('\(!+%"'-""%)[ 56.705201 62.291401 36.784601 24.558200 42.054601 61.132001 56.705201 59.656401 61.132001 61.132001 0.000000 ] xS
ep
end
